Plan for Web Calculator

P1 - 0.5282817877171742
po2 - 0.9096206129040943 , 2.0098199927797196
P2 - 0.839379295755261 , 0.05940411908089032
P3 - 0.6838305417362176 , 0.2938429533990322
T1 - 1.2
T2 - 1.4073122903541277 , 0.5265117096458725
To2 - 1 , 1

0.09038 
wednesday- example, ask about N, ask about units, add a unit field, add third row
thrusday- fix N, fix units, work on api

Functionality Needed: 
- units
- subelements
- Isentropic improvement


    try {
    var P = parseFloat(document.getElementById("P").value);
    var T = parseFloat(document.getElementById("T").value);
    var M1 = parseFloat(document.getElementById("M1").value);
    var A1 = parseFloat(document.getElementById("A1").value);
    var gamma = parseFloat(document.getElementById("gamma").value);
    var alpha1 = parseFloat(document.getElementById("alpha1").value);
    var beta1 = parseFloat(document.getElementById("beta1").value);
    var w = parseFloat(document.getElementById("w").value);
    var Fx = parseFloat(document.getElementById("Fx").value);
    var m2 = parseFloat(document.getElementById("m2").value);
    var A2 = parseFloat(document.getElementById("A2").value);
    var Q = parseFloat(document.getElementById("Q").value);
    var psi = parseFloat(document.getElementById("psi").value);
    var nu = parseFloat(document.getElementById("nu").value);
    var f = parseFloat(document.getElementById("f").value);
    var alpha2 = parseFloat(document.getElementById("alpha2").value);
    var beta2 = parseFloat(document.getElementById("beta2").value);
    var N = parseFloat(document.getElementById("subelements").value);

    var sum = P + T + M1 + A1 + gamma + alpha1 + beta1 + w + Fx + m2 + A2 + Q + psi + nu + f + alpha2 + beta2 + N;
    var M2 = sum;
    var PT2 = sum;
    var TT2 = sum;
    var P2 = sum;
    var T2 = sum;
    var deltaS = sum;

    document.getElementById("M2").value = M2;
    document.getElementById("PT2").value = PT2;
    document.getElementById("TT2").value = TT2;
    document.getElementById("P2").value = P2;
    document.getElementById("T2").value = T2;
    document.getElementById("deltaS").value = deltaS;}

    catch(error){
        console.log(error);
        debugger;
    }

-----------------------------------------------------------------------------------------------------------------
  <py-config>
    packages = ["numpy"] 
  </py-config>
  <py-script>
    #"scipy", "scipy.optimize", "scipy.special", "fractions", "warnings", "argparse", 
    import argparse
    import sys
    import numpy as np
    import scipy.optimize as scopt
    import scipy.special as spec
    import fractions as frac
    import warnings
    TR = 0
    G = 0
    f1 = 0
    Lambda = 0
    b = 0
    c = 0
    det = 0
    def testVars():
      from js import P, T , M1 , A1 , gamma , alpha1 , beta1 , w , Fx , m2 , A2 , Q , xi , nu , f , alpha2 , beta2 , N, k, qr, Af, AR, f1, TR, cf, cd, Ad

      TR = np.float64(bool(k-1))*(1 + qr) + np.float64(not bool(k-1))*1

      G = (k-1)/2

      f1 = 1 + G * M1*M1

      try:
          Lambda = np.complex128(\
                      ((1 + beta1*k*(1-cf/4*Af - cd/2*Ad)*M1**2 + (1-xi+nu*(f1**(k/(k-1))-1))*(AR-1) ) \
                      /(alpha1/alpha2*M1*np.sqrt(f1*TR))) \
                      )
          Lambda *= Lambda
      except:
          Lambda = np.complex128(\
                      ((1 + beta1*k*(1-cf/4*Af - cd/2*Ad)*M1**2 + (1-xi+nu*(np.exp(-M1**2)-1))*(AR-1) ) \
                      /(alpha1/alpha2*M1*np.sqrt(f1*TR))) \
                      )
          Lambda *= Lambda


      b = (Lambda - 2*k*beta2*(1+xi*(1/AR-1))*(1+cf/4*Af/AR)) \
              /(Lambda * G  -(k*beta2*(1+cf/4*Af/AR))**2)

      c = -(1+xi*(1/AR-1))**2 \
              /(Lambda * G  -(k*beta2*(1+cf/4*Af/AR))**2)

      det = (b/2)*(b/2)-c
      print(det)
      solveBiquadratic()
    def solveBiquadratic():
      '''
      Solution to mass, momentum, and energy balance equations.
      Mass balance is simple inlet nad outlet balance
      Momentum balance as 1 friction force and 1 drag force
      Energy balance has 1 heat addition term
      Gravity and other sources of Potential Energy have been ignored.
      Uses calorically perfect ideal gas assumption.
      '''

      roots = np.array([-b/2+np.sqrt(det),-b/2-np.sqrt(det)],dtype=np.complex128)

      # reject non-physical roots and replace with nans
      global M2
      M2 = np.sqrt(rejectNonphysicalRoots(roots,keepNans=True))
      print(M2)
    def rejectNonphysicalRoots(roots,keepNans=False):

      # set any roots with negative real part to nan
      roots[np.real(roots)<0] = np.nan

      # set any roots with non-zero imaginary part to nan 
      roots[~np.isclose(np.imag(roots),0,atol=1e-6)] = np.nan


      # sort values from lowest to highest
      roots.sort()

      # remove any nans from roots, cast as real, and return
      if( keepNans):
          return(np.real(roots))
      else:
          return(np.real(roots[~np.isnan(roots)]))
  </py-script>

MEETING NOTES:

Questions:
- default values
  -M1
  -A1
  gamma


- example flows values? different processes? etc.
- in paper

- sub elements? what values get reused vs replaced?
- M, area ratio, Qr, Af.

- Does he want me to incorporate some of the other values we talked about?

- graph? How could I test this accuracy?



  usage: uniflow.py [-h] [--area-ratio AR] [--drag-area-ratio AD] [--drag-coefficient CD] [-friction-coefficient CF]
                  [--friction-area-ratio AF] [--inlet-mach M1] [-xi XI] [-nu NU] [--heat-transfer-ratio QR] [--cp/cv K]
                  [--TwTo1 TWR] [--isentropic] [--inlet-momentum-flux-correction-factor B1]
                  [--outlet-momentum-flux-correction-factor B2] [--inlet-mass-flux-correction-factor A1]
                  [--outlet-mass-flux-correction-factor A2] [--debug]

Steady Quasi-1D Compressible Flow.Assumes Calorically Perfect Ideal Gas

optional arguments:
  -h, --help            show this help message and exit
  --area-ratio AR, -ar AR
                        Exit Area / Inlet Area
  --drag-area-ratio AD, -ad AD
                        Drag Area / Inlet Area
  --drag-coefficient CD, --drag-coef CD, -cd CD
                        Drag Coefficient
  -friction-coefficient CF, --friction-coef CF, -cf CF
                        Friction Coefficient
  --friction-area-ratio AF, -af AF
                        Friction Surface Area / Inlet Area
  --inlet-mach M1, -m1 M1
                        Inlet Mach Number
  -xi XI                Wall-pressure weighting for exit-static-to-inlet-static pressure ratio
  -nu NU                Wall-pressure weighting for inlet-stagnation-to-inlet-static pressure ratio
  --heat-transfer-ratio QR, -qr QR
                        heat transfer / inlet specific total enthalpy (q/ho)
  --cp/cv K, -k K       Ratio of Specific Heats
  --TwTo1 TWR, -twr TWR
                        Ratio of wall temperature to inlet stagnation temperature
  --isentropic, -s      Force entropy change to zero
  --inlet-momentum-flux-correction-factor B1, --beta1 B1, -b1 B1
                        inlet momentum flux correction factor
  --outlet-momentum-flux-correction-factor B2, --beta2 B2, -b2 B2
                        inlet momentum flux correction factor
  --inlet-mass-flux-correction-factor A1, --alpha1 A1, -a1 A1
                        inlet momentum flux correction factor
                        inlet momentum flux correction factor
  --debug               debug mode